Budapest Public Transport and Tourist Recommender Agent
Interactive assistant based on LangGraph + Streamlit for Budapest public transportation and tourist attractions.
üöÄ Features

Natural language route planning with public transportation (Google Directions API)
Nearby tourist attraction recommendations (Google Places API)
LangGraph-based ReAct (Reasoning and Acting) agent
Web search capability for accurate tourist information
Personalized itinerary creation with time frames and interest preferences
Streamlit-based browser UI
Developer mode for visualizing reasoning steps and tool calls

üß† Architecture
The system employs two main agent architectures:

ReAct agent (agent.py): Graph-based agent with three main nodes:

Reasoning: Explicit thinking step that analyzes the user request
LLM: The language model that processes the request and decides on tool usage
Action: Tool execution and result processing


Itinerary agent (itinerary_agent.py): Linear workflow-based agent that generates personalized itineraries:

Identifying attractions based on user preferences
Gathering detailed information through web search
Planning routes between attractions
Generating final itinerary with timeline and descriptions



üõ†Ô∏è Tools
The system uses five main tools:

parse_input_tool: Extract locations from natural language text
directions_tool: Route planning using Google Directions API
attractions_tool: Search for attractions and places using Google Places API
extract_attractions_tool: Identify attraction names from user queries
attraction_info_tool: Search for detailed information about attractions using web search

üì¶ Installation

Clone the repo or copy the files:

bashgit clone https://github.com/your-username/budapest-agent-app.git
cd budapest-agent-app

Create a .env file based on .env.example:

bashcp .env.example .env
Then edit it with your own API keys:
envOPENAI_API_KEY=sk-...
MAPS_API_KEY=AIza...

Install the required packages:

bashpip install -r requirements.txt
If requirements.txt is not available, install manually:
bashpip install streamlit langchain_openai langchain_core langgraph python-dotenv requests
üß™ Running Locally
bashstreamlit run app.py
This will open the application in your browser. Type where you want to go, and the assistant will suggest routes + attractions!
üíª User Interface
The application has two main functions:

Chat: Natural language conversation with the agent

Route planning between two locations
Searching for attractions and querying information
Dining and program suggestions


Itinerary: Creating personalized itineraries

Specifying starting point
Selecting areas of interest
Setting time frame and transportation mode
Providing specific requests



Developer Mode
The application has a developer mode that displays detailed information:

Reasoning process: Visualization of the agent's thinking step
Tool calls: Tools used by the agent and their parameters
Tool results: Data returned by the tools

üßÆ Technical Details
Agent Implementation
The ReAct agent is implemented using the LangGraph framework:
pythongraph = StateGraph(AgentState)
graph.add_node("reason", self.add_reasoning)  # Reasoning node
graph.add_node("llm", self.call_openai)       # LLM node
graph.add_node("action", self.take_action)    # Action node
graph.add_edge("reason", "llm")
graph.add_conditional_edges("llm", self.exists_action, {True: "action", False: END})
graph.add_edge("action", "llm")
graph.set_entry_point("reason")
Language Models
The system uses three different OpenAI language models:

llm (GPT-4o-mini): General requests and tool usage
reasoning_llm (GPT-4o-mini): Reasoning step with lower temperature
search_llm (GPT-4o-search-preview): Web search capability for up-to-date information

üõ°Ô∏è Security

The .env file contains API keys, do not upload it to GitHub!
The .gitignore ensures that .env and cache files are not tracked by version control.

üìÑ File Structure
bashbudapest-agent-app/
‚îú‚îÄ‚îÄ app.py               # Streamlit UI
‚îú‚îÄ‚îÄ agent.py             # LangGraph-based ReAct agent
‚îú‚îÄ‚îÄ itinerary_agent.py   # Itinerary creation component
‚îú‚îÄ‚îÄ .env.example         # API key template
‚îú‚îÄ‚îÄ .gitignore           # Git exclusions
‚îú‚îÄ‚îÄ requirements.txt     # Dependencies
‚îî‚îÄ‚îÄ README.md            # Documentation
üîÆ Future Plans

Expanding web search to discover current events
Integrating map visualization
Offline mode for limited internet access
Multilingual tourist recommendations
Performance optimizations to reduce response time


Budapest t√∂megk√∂zleked√©si √©s turisztikai aj√°nl√≥ √°gens
LangGraph + Streamlit alap√∫ interakt√≠v asszisztens Budapest t√∂megk√∂zleked√©s√©hez √©s turisztikai l√°tv√°nyoss√°gaihoz.
üöÄ Funkci√≥k

Term√©szetes nyelv≈± √∫tvonaltervez√©s t√∂megk√∂zleked√©ssel (Google Directions API)
K√∂zeli turisztikai l√°tnival√≥k aj√°nl√°sa (Google Places API)
LangGraph alap√∫ ReAct (Reasoning and Acting) √°gens haszn√°lata
Web keres√©s k√©pess√©g a turisztikai inform√°ci√≥k pontos√≠t√°s√°hoz
Szem√©lyre szabott √∫titerv k√©sz√≠t√©s id≈ëkerettel √©s √©rdekl≈ëd√©si k√∂r√∂kkel
Streamlit alap√∫ b√∂ng√©sz≈ëben fut√≥ UI
Developer m√≥d a reasoning l√©p√©sek √©s eszk√∂zh√≠v√°sok vizualiz√°l√°s√°hoz

üß† Architekt√∫ra
A rendszer k√©t f≈ë √°gens architekt√∫r√°t alkalmaz:

ReAct √°gens (agent.py): Gr√°falap√∫ √°gens h√°rom f≈ë csom√≥ponttal:

Reasoning: Explicit gondolkod√°si l√©p√©s, amely elemzi a felhaszn√°l√≥i k√©r√©st
LLM: A nyelvi modell, amely feldolgozza a k√©r√©st √©s d√∂nt az eszk√∂z√∂k haszn√°lat√°r√≥l
Action: Az eszk√∂z√∂k v√©grehajt√°sa √©s az eredm√©nyek feldolgoz√°sa


√ötiterv √°gens (itinerary_agent.py): Line√°ris workflow-alap√∫ √°gens, amely szem√©lyre szabott √∫titerveket gener√°l:

L√°tv√°nyoss√°gok azonos√≠t√°sa a felhaszn√°l√≥i preferenci√°k alapj√°n
R√©szletes inform√°ci√≥k gy≈±jt√©se web keres√©ssel
√ötvonalak tervez√©se a l√°tv√°nyoss√°gok k√∂z√∂tt
V√©gs≈ë √∫titerv gener√°l√°sa id≈ëbeoszt√°ssal √©s le√≠r√°sokkal



üõ†Ô∏è Eszk√∂z√∂k
A rendszer √∂t f≈ë eszk√∂zt haszn√°l:

parse_input_tool: Helysz√≠nek kinyer√©se term√©szetes nyelv≈± sz√∂vegb≈ël
directions_tool: √ötvonaltervez√©s a Google Directions API seg√≠ts√©g√©vel
attractions_tool: L√°tnival√≥k √©s helyek keres√©se a Google Places API seg√≠ts√©g√©vel
extract_attractions_tool: L√°tv√°nyoss√°gnevek azonos√≠t√°sa a felhaszn√°l√≥i k√©r√©sb≈ël
attraction_info_tool: R√©szletes inform√°ci√≥k keres√©se a l√°tv√°nyoss√°gokr√≥l web keres√©ssel

üì¶ Telep√≠t√©s

Kl√≥nozd a rep√≥t vagy m√°sold a f√°jlokat:

bashgit clone https://github.com/your-username/budapest-agent-app.git
cd budapest-agent-app

Hozz l√©tre egy .env f√°jlt a .env.example alapj√°n:

bashcp .env.example .env
Majd szerkeszd ki a saj√°t API kulcsaiddal:
envOPENAI_API_KEY=sk-...
MAPS_API_KEY=AIza...

Telep√≠tsd a sz√ºks√©ges csomagokat:

bashpip install -r requirements.txt
Ha nincs requirements.txt, telep√≠tsd k√©zzel:
bashpip install streamlit langchain_openai langchain_core langgraph python-dotenv requests
üß™ Futtat√°s lok√°lisan
bashstreamlit run app.py
Ez megnyitja az alkalmaz√°st a b√∂ng√©sz≈ëben. √çrd be, hogy honnan hov√° szeretn√©l menni, √©s az asszisztens √∫tvonalat + l√°tnival√≥kat javasol!
üíª Felhaszn√°l√≥i fel√ºlet
Az alkalmaz√°s k√©t f≈ë funkci√≥val rendelkezik:

Chat: Term√©szetes nyelv≈± besz√©lget√©s az √°genssel

√ötvonaltervez√©s k√©t helysz√≠n k√∂z√∂tt
L√°tnival√≥k keres√©se √©s inform√°ci√≥k lek√©rdez√©se
√âtkez√©si √©s programjavaslatok


√ötiterv: Szem√©lyre szabott √∫titervek k√©sz√≠t√©se

Kiindul√°si pont megad√°sa
√ârdekl≈ëd√©si k√∂r√∂k kiv√°laszt√°sa
Id≈ëkeret √©s k√∂zleked√©si m√≥d be√°ll√≠t√°sa
Specifikus k√©r√©sek megad√°sa



Developer m√≥d
Az alkalmaz√°s rendelkezik egy fejleszt≈ëi m√≥ddal, amely r√©szletes inform√°ci√≥kat jelen√≠t meg:

Reasoning folyamat: Az √°gens gondolkod√°si l√©p√©s√©nek megjelen√≠t√©se
Eszk√∂zh√≠v√°sok: Az √°gens √°ltal haszn√°lt eszk√∂z√∂k √©s param√©tereik
Eszk√∂zeredm√©nyek: Az eszk√∂z√∂k √°ltal visszaadott adatok

üßÆ Technikai r√©szletek
√Ågensmegval√≥s√≠t√°s
A ReAct √°gens a LangGraph keretrendszer seg√≠ts√©g√©vel van implement√°lva:
pythongraph = StateGraph(AgentState)
graph.add_node("reason", self.add_reasoning)  # Reasoning csom√≥pont
graph.add_node("llm", self.call_openai)       # LLM csom√≥pont
graph.add_node("action", self.take_action)    # Action csom√≥pont
graph.add_edge("reason", "llm")
graph.add_conditional_edges("llm", self.exists_action, {True: "action", False: END})
graph.add_edge("action", "llm")
graph.set_entry_point("reason")
Nyelvi modellek
A rendszer h√°rom k√ºl√∂nb√∂z≈ë OpenAI nyelvi modellt haszn√°l:

llm (GPT-4o-mini): √Åltal√°nos k√©r√©sek √©s eszk√∂zhaszn√°lat
reasoning_llm (GPT-4o-mini): Reasoning l√©p√©s alacsonyabb h≈ëm√©rs√©klettel
search_llm (GPT-4o-search-preview): Web keres√©si k√©pess√©ggel a naprak√©sz inform√°ci√≥khoz

üõ°Ô∏è Biztons√°g

A .env f√°jl tartalmazza az API kulcsokat, ezt ne t√∂ltsd fel GitHubra!
A .gitignore gondoskodik r√≥la, hogy a .env √©s cache f√°jlok ne ker√ºljenek verzi√≥k√∂vet√©sre.

üìÑ F√°jlstrukt√∫ra
bashbudapest-agent-app/
‚îú‚îÄ‚îÄ app.py               # Streamlit UI
‚îú‚îÄ‚îÄ agent.py             # LangGraph alap√∫ ReAct agent
‚îú‚îÄ‚îÄ itinerary_agent.py   # √ötiterv k√©sz√≠t≈ë komponens
‚îú‚îÄ‚îÄ .env.example         # API kulcs sablon
‚îú‚îÄ‚îÄ .gitignore           # Git kiz√°r√°sok
‚îú‚îÄ‚îÄ requirements.txt     # F√ºgg≈ës√©gek
‚îî‚îÄ‚îÄ README.md            # Dokument√°ci√≥
üîÆ Tervek

Webes keres√©s b≈ëv√≠t√©se aktu√°lis esem√©nyek felder√≠t√©s√©hez
T√©rk√©pes vizualiz√°ci√≥ integr√°l√°sa
Offline m√≥d a korl√°tozott internet hozz√°f√©r√©s eset√©re
T√∂bbnyelv≈± turisztikai aj√°nl√°sok
Teljes√≠tm√©nyoptimaliz√°l√°sok a v√°laszid≈ë cs√∂kkent√©s√©re


üß† Szerz≈ë / Author
Szalay Mikl√≥s M√°rton
